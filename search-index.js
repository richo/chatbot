var searchIndex = {};
searchIndex['chatbot'] = {"items":[[0,"","chatbot","",null,null],[3,"Chatbot","","The Chatbot is the central data structure of the chatbot platform. It contains a `run` method\nwhich listens for messages from adapters and routes them to handlers. Any program which uses\nchatbot will need to minimally create a Chatbot, add an adapter, add a handler, and call Chatbot\n[`run`](chatbot/struct.Chatbot.html#method.run).",null,null],[0,"adapter","","Contains the `ChatAdapter` trait and several implementations",null,null],[3,"CliAdapter","chatbot::adapter","The CliAdapter reads lines from stdin and dispatches them as\nIncomingMessages to the chatbot.  Replies are printed to stdout. There is\ncurrently no extra configuration available to the CliAdapter.",null,null],[3,"SlackAdapter","","SlackAdapter sends and receives messages from the Slack chat service. Until actualy\nconfiguration is added, the slack token should be placed in the environment variable\n`SLACK_BOT_TOKEN`",null,null],[3,"IrcAdapter","","Connect your bot to IRC with the IrcAdapter",null,null],[11,"new","","create a new CliAdapter",0,{"inputs":[{"name":"cliadapter"}],"output":{"name":"cliadapter"}}],[11,"get_name","","name of CliAdapter",0,{"inputs":[{"name":"cliadapter"}],"output":{"name":"str"}}],[11,"process_events","","The CliAdapter uses two threads to",0,{"inputs":[{"name":"cliadapter"},{"name":"chatbot"},{"name":"sender"}],"output":null}],[11,"new","","",1,{"inputs":[{"name":"slackadapter"}],"output":{"name":"slackadapter"}}],[11,"get_name","","SlackAdapter name",1,{"inputs":[{"name":"slackadapter"}],"output":{"name":"str"}}],[11,"process_events","","",1,{"inputs":[{"name":"slackadapter"},{"name":"chatbot"},{"name":"sender"}],"output":null}],[11,"new","","",2,{"inputs":[{"name":"ircadapter"},{"name":"ircconfig"}],"output":{"name":"ircadapter"}}],[11,"get_name","","",2,{"inputs":[{"name":"ircadapter"}],"output":{"name":"str"}}],[11,"process_events","","",2,{"inputs":[{"name":"ircadapter"},{"name":"chatbot"},{"name":"sender"}],"output":null}],[6,"IrcConfig","","",null,null],[8,"ChatAdapter","","Chatbot is extensible in both message sources and command handling. To add a\nnew message source, create a type that implements the `ChatAdapter` trait.",null,null],[10,"get_name","","The name of the adapter which is used internally as a map key and for\ndebugging.",3,{"inputs":[{"name":"chatadapter"}],"output":{"name":"str"}}],[10,"process_events","","ChatAdapters must implement process_events. What this method does will\nvary wildly by adapter. At the very least, it must generate IncominMessages from its input,\nsend them via the `Sender` that's passed in. The main loop has the other end of this\nreceiver. The IncomingMessage must be constructed with a `Sender<OutgoingMessage>` for\nwhich the adapter listens on the Receiver to send messages back to the service.",3,{"inputs":[{"name":"chatadapter"},{"name":"chatbot"},{"name":"sender"}],"output":null}],[0,"handler","chatbot","Contains the MessageHandler trait and handler implementations.",null,null],[3,"GithubIssueLinker","chatbot::handler","Respond to github issue links with the title and hyperlink",null,null],[3,"BasicResponseHandler","","A basic response handler",null,null],[11,"new","","",4,{"inputs":[{"name":"githubissuelinker"}],"output":{"name":"githubissuelinker"}}],[11,"name","","",4,{"inputs":[{"name":"githubissuelinker"}],"output":{"name":"str"}}],[11,"re","","",4,{"inputs":[{"name":"githubissuelinker"}],"output":{"name":"regex"}}],[11,"handle","","",4,{"inputs":[{"name":"githubissuelinker"},{"name":"incomingmessage"}],"output":{"name":"handlerresult"}}],[0,"sup","","",null,null],[5,"account_from_env","chatbot::handler::sup","Try and create an account from environment variables",null,{"inputs":[],"output":{"name":"result"}}],[3,"PrintLadder","","Startuppong.com get_players handler",null,null],[3,"AddMatch","","Add startuppong.com matches from chat",null,null],[6,"Account","","",null,null],[11,"new","","Create the PrintLadder handler.",5,{"inputs":[{"name":"printladder"},{"name":"account"},{"name":"usize"}],"output":{"name":"printladder"}}],[11,"name","","",5,{"inputs":[{"name":"printladder"}],"output":{"name":"str"}}],[11,"re","","",5,{"inputs":[{"name":"printladder"}],"output":{"name":"regex"}}],[11,"handle","","",5,{"inputs":[{"name":"printladder"},{"name":"incomingmessage"}],"output":{"name":"handlerresult"}}],[11,"new","","",6,{"inputs":[{"name":"addmatch"},{"name":"account"}],"output":{"name":"addmatch"}}],[11,"name","","",6,{"inputs":[{"name":"addmatch"}],"output":{"name":"str"}}],[11,"re","","",6,{"inputs":[{"name":"addmatch"}],"output":{"name":"regex"}}],[11,"handle","","",6,{"inputs":[{"name":"addmatch"},{"name":"incomingmessage"}],"output":{"name":"handlerresult"}}],[6,"HandlerResult","chatbot::handler","",null,null],[8,"MessageHandler","","Implementing a MessageHandler enables responding to IncomingMessages. There\nare currently very few requirements to creating a handler. The\n[`handle`](#method.handle) function receives\n[`IncomingMessage`](message/struct.IncomingMessage.html)s.  The implementer\nis responsible for testing whether it's interested in replying. Optionally\ncall [`reply`](message/struct.IncomingMessage.html#method.reply) on the\n[`IncomingMessage`](message/struct.IncomingMessage.html) to send a response.",null,null],[10,"name","","",7,{"inputs":[{"name":"messagehandler"}],"output":{"name":"str"}}],[10,"handle","","",7,{"inputs":[{"name":"messagehandler"},{"name":"incomingmessage"}],"output":{"name":"handlerresult"}}],[10,"re","","",7,{"inputs":[{"name":"messagehandler"}],"output":{"name":"regex"}}],[11,"can_handle","","Uses re() to test whether the handler should process this message.",7,{"inputs":[{"name":"messagehandler"},{"name":"str"}],"output":{"name":"bool"}}],[11,"get_captures","","Uses re() to get capturing groups from a message",7,{"inputs":[{"name":"messagehandler"},{"name":"str"}],"output":{"name":"option"}}],[11,"new","","",8,{"inputs":[{"name":"basicresponsehandler"},{"name":"str"},{"name":"str"},{"name":"f"}],"output":{"name":"basicresponsehandler"}}],[11,"name","","",8,{"inputs":[{"name":"basicresponsehandler"}],"output":{"name":"str"}}],[11,"re","","",8,{"inputs":[{"name":"basicresponsehandler"}],"output":{"name":"regex"}}],[11,"handle","","",8,{"inputs":[{"name":"basicresponsehandler"},{"name":"incomingmessage"}],"output":{"name":"handlerresult"}}],[0,"message","chatbot","Types for incoming messages, outgoing messages, and an enum wrapper to enable control commands\nfor adapters.",null,null],[3,"OutgoingMessage","chatbot::message","An OutgoingMessage is a response to some IncomingMessage. It contains a\nString and a copy of the IncomingMessage that it is in reply to.",null,null],[3,"IncomingMessage","","adapters convert strings they receive into an IncomingMessage. The\nproperties on this struct exist to help adapters route any `OutgoingMessage`\nback to where the IncomingMessage originated.",null,null],[4,"AdapterMsg","","Adapters will receive on a port that accepts a stream of `AdapterMsg`. The\nOutgoing variant contains a message to return. All other variants are\ncontrol messages which a well behaved adapter should handle.",null,null],[13,"Outgoing","","A message that should be sent to a chat provider",9,null],[13,"Shutdown","","The chatbot is shutting down and the adapters should nicely terminate their connections.",9,null],[11,"fmt","","",9,{"inputs":[{"name":"adaptermsg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"outgoingmessage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"outgoingmessage"},{"name":"string"},{"name":"incomingmessage"}],"output":{"name":"outgoingmessage"}}],[11,"get_incoming","","Return a reference to the\n[`IncomingMessage`](message/struct.IncomingMessage.html) that this\nmessage is in response to.",10,{"inputs":[{"name":"outgoingmessage"}],"output":{"name":"incomingmessage"}}],[11,"as_bytes","","Get ref to response bytes",10,null],[11,"as_ref","","Get ref to response str",10,{"inputs":[{"name":"outgoingmessage"}],"output":{"name":"str"}}],[11,"clone","","",11,{"inputs":[{"name":"incomingmessage"}],"output":{"name":"incomingmessage"}}],[11,"new","","",11,{"inputs":[{"name":"incomingmessage"},{"name":"string"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"string"},{"name":"sender"}],"output":{"name":"incomingmessage"}}],[11,"channel","","",11,{"inputs":[{"name":"incomingmessage"}],"output":{"name":"option"}}],[11,"user","","",11,{"inputs":[{"name":"incomingmessage"}],"output":{"name":"option"}}],[11,"get_contents","","",11,{"inputs":[{"name":"incomingmessage"}],"output":{"name":"str"}}],[11,"reply","","Reply to the message.",11,{"inputs":[{"name":"incomingmessage"},{"name":"string"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"incomingmessage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","chatbot","Create a new chatbot instance.",12,{"inputs":[{"name":"chatbot"},{"name":"str"}],"output":{"name":"chatbot"}}],[11,"get_name","","Return the name provided in initialization",12,{"inputs":[{"name":"chatbot"}],"output":{"name":"str"}}],[11,"get_addresser","","Return the regular expression of what the bot will be addressed by",12,{"inputs":[{"name":"chatbot"}],"output":{"name":"regex"}}],[11,"add_adapter","","Add a ChatAdapter to the bot",12,{"inputs":[{"name":"chatbot"},{"name":"t"}],"output":null}],[11,"add_handler","","Add a MessageHandler to the bot",12,{"inputs":[{"name":"chatbot"},{"name":"t"}],"output":null}],[11,"add_addressed_handler","","Add a MessageHandler, that requires the bot to be addressed, to the bot",12,{"inputs":[{"name":"chatbot"},{"name":"t"}],"output":null}],[11,"run","","Start processing messages",12,{"inputs":[{"name":"chatbot"}],"output":null}],[14,"regex!","","Shorthand for creating a `Regex` as suggested by the regex crate. You probably don't need to\n`macro_use` this unless you're creating handlers in an external module.",null,null],[14,"handler!","","The `handler!` macro is shorthand for creating simple chat handlers. It\naccepts a name, a string used to build a regex for testing the incoming\nmessage and for collecting captures, and a closure which should return a\n`String` to be sent as the outgoing message.",null,null]],"paths":[[3,"CliAdapter"],[3,"SlackAdapter"],[3,"IrcAdapter"],[8,"ChatAdapter"],[3,"GithubIssueLinker"],[3,"PrintLadder"],[3,"AddMatch"],[8,"MessageHandler"],[3,"BasicResponseHandler"],[4,"AdapterMsg"],[3,"OutgoingMessage"],[3,"IncomingMessage"],[3,"Chatbot"]]};
initSearch(searchIndex);
